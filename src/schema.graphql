type Query {
  hello: String!
  me: User!
  symptoms: [Symptom!]!
  symptomDetails: [SymptomDetail]!
  userSymptomDetails: [UserSymptomDetail!]!
}

type Mutation {
  createUser(data: CreateUserInput): AuthPayload!
  loginUser(data: LoginUserInput): AuthPayload!
  createUserSymptomDetail(data: CreateUserSymptomDetail): UserSymptomDetail!
  deleteUserSymptomDetail(userSymptomDetailId: ID!): UserSymptomDetail!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserSymptomDetail {
  date: String!
  symptomDetail: ID!
}
type User {
  id: ID!
  name: String!
  email: String!
  userSymptomDetails: [UserSymptomDetail!]!
}

type AuthPayload {
  token: String!
  user: User!
}
type Symptom {
  id: ID!
  name: String!
  color: String!
  isExclusive: Boolean!
  createdAt: String!
  updatedAt: String!
  symptomDetails: [SymptomDetail!]!
}

type SymptomDetail {
  id: ID!
  name: String!

  symptom: Symptom!
  createdAt: String!
  updatedAt: String!
}

type UserSymptomDetail {
  id: ID!
  user: User!
  date: String!
  symptom: Symptom!
  symptomDetail: SymptomDetail!
  createdAt: String!
  updatedAt: String!
}
